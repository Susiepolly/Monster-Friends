{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardsArray","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestMonsters","searchField","onSearchChange","monsters","isPending","filteredMonsters","filter","monster","toLowerCase","includes","connect","searchMonsters","requestMonsters","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateMonsters","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e278a666.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return(\r\n    <div className='bg-light-gray dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?set=set2`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}/>\r\n      );\r\n  })\r\n  return (\r\n    <div>\r\n      {cardsArray}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--light-purple bg-near-white'\r\n        type='search'\r\n        placeholder='search monsters'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '750px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops! That is not good!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { setSearchField, requestMonsters } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchMonsters.searchField,\r\n    monsters: state.requestMonsters.monsters,\r\n    isPending: state.requestMonsters.isPending,\r\n    error: state.requestMonsters.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestMonsters: () => dispatch(requestMonsters())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestMonsters();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchChange, monsters, isPending} = this.props;\r\n    const filteredMonsters = monsters.filter(monster => {\r\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n    <h1 className='tc'>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>Monster friends</h1>\r\n        <Searchbox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredMonsters}/>\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MONSTERS_PENDING,\r\n  REQUEST_MONSTERS_SUCCESS,\r\n  REQUEST_MONSTERS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport const requestMonsters = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_MONSTERS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_MONSTERS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_MONSTERS_FAILED, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_MONSTERS_PENDING = 'REQUEST_MONSTERS_PENDING';\r\nexport const REQUEST_MONSTERS_SUCCESS = 'REQUEST_MONSTERS_SUCCESS';\r\nexport const REQUEST_MONSTERS_FAILED = 'REQUEST_MONSTERS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MONSTERS_PENDING,\r\n  REQUEST_MONSTERS_SUCCESS,\r\n  REQUEST_MONSTERS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchMonsters = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateMonsters = {\r\n  isPending: false,\r\n  monsters: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestMonsters = (state=initialStateMonsters, action ={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_MONSTERS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_MONSTERS_SUCCESS:\r\n      return Object.assign({}, state, {monsters: action.payload, isPending: false })\r\n    case REQUEST_MONSTERS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false })\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchMonsters, requestMonsters } from './reducers';\r\nimport 'tachyons';\r\nimport './containers/App.css';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchMonsters, requestMonsters})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}