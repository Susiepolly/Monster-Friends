{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_MONSTERS_PENDING, REQUEST_MONSTERS_SUCCESS, REQUEST_MONSTERS_FAILED } from './constants.js';\nexport const setSearchField = text => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\nexport const requestMonsters = () => dispatch => {\n  dispatch({\n    type: REQUEST_MONSTERS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicod.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_MONSTERS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_MONSTERS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["C:/Users/susie/Projects/Monster-Friends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_MONSTERS_PENDING","REQUEST_MONSTERS_SUCCESS","REQUEST_MONSTERS_FAILED","setSearchField","text","type","payload","requestMonsters","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACEA,mBADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,uBAJF,QAKO,gBALP;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEN,mBADD;AAELO,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,eAAe,GAAG,MAAOC,QAAD,IAAc;AACjDA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,2CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,wBAAR;AAAkCK,IAAAA,OAAO,EAAEO;AAA3C,GAAD,CAFxB,EAGGC,KAHH,CAGSC,KAAK,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,uBAAR;AAAiCI,IAAAA,OAAO,EAAES;AAA1C,GAAD,CAH1B;AAID,CANM","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MONSTERS_PENDING,\r\n  REQUEST_MONSTERS_SUCCESS,\r\n  REQUEST_MONSTERS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport const requestMonsters = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_MONSTERS_PENDING});\r\n  fetch('https://jsonplaceholder.typicod.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_MONSTERS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_MONSTERS_FAILED, payload: error}))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}